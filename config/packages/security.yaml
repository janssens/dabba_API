security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    enable_authenticator_manager: true
    providers:
        users:
            entity:
                class: App\Entity\User
                property: 'email'
    encoders:
        # use your user class name here
        App\Entity\User:
            # Use native password encoder
            # This value auto-selects the best possible hashing algorithm
            # (i.e. Sodium when available).
            algorithm: bcrypt
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api/
            stateless: true
            provider: users
            guard:
                authenticators:
                    - App\Security\AccessTokenAuthenticator
        main:
            lazy: true
            provider: users
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_home

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/oauth2/authorize, roles: PUBLIC_ACCESS }
        - { path: ^/api/restaurants, roles: PUBLIC_ACCESS }
        - { path: ^/api/container, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/tags, roles: PUBLIC_ACCESS }
        - { path: ^/api/meal_types, roles: PUBLIC_ACCESS }
        - { path: ^/api/cms, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/users, roles: PUBLIC_ACCESS, methods: [POST] }
        - { path: ^/api/colors, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/admin/super, roles: ROLE_SUPER_ADMIN }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/api/docs, roles: IS_AUTHENTICATED_ANONYMOUSLY } # Allows accessing the Swagger UI
        - { path: ^/api/accessToken, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

    role_hierarchy:
        ROLE_SUPER_ADMIN:   [ROLE_ADMIN,ROLE_USER]
        ROLE_ADMIN:     [ROLE_USER]
